#!/usr/bin/env ruby
require 'yaml'
require 'optparse'

git_dir = `git rev-parse --git-dir`.chomp
exit 1 unless File.exists?(git_dir)

@options = {}
OptionParser.new do |opts|
  # copy-paste from readme
  opts.banner = <<BANNER.sub('<br/>','')
Configures git authors when pair programming.

    git pair sp js
    user.name=Josh Susser & Sam Pierson
    user.email=pair+jsusser+sam@pivotallabs.com


Create a `.pairs` config file in project root or your home folder.

    # .pairs - configuration for 'git pair'
    pairs:
      # <initials>: <Firstname> <Lastname>[; <email-id>]
      eh: Edward Hieatt
      js: Josh Susser; jsusser
      sf: Serguei Filimonov; serguei
    email:
      prefix: pair
      domain: pivotallabs.com
    #global: true


By default this affects the current project (.git/config).<br/>
Use the `--global` option or add `global: true` to your `.pairs` file to set the global git configuration for all projects (~/.gitconfig).

Options are:
BANNER
  opts.on("-g", "--global", "Modify global git options instead of local") { @options[:global] = true }
  opts.on("-v", "--version", "Show Version") do
    $LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
    require "pivotal_git_scripts/version"
    puts PivotalGitScripts::VERSION
    exit
  end
  opts.on("-h", "--help", "Show this.") { puts opts; exit }
end.parse!(ARGV)

## Configuration

def get_pairs_config
  pairs_file_path = nil
  candidate_file_path = '.pairs'
  until pairs_file_path || File.expand_path(candidate_file_path) == '/.pairs' do
    if File.exists?(candidate_file_path)
      pairs_file_path = candidate_file_path
    else
      candidate_file_path = File.join("..", candidate_file_path)
    end
  end

  unless pairs_file_path
    puts <<-INSTRUCTIONS
Could not find a .pairs file. Create a YAML file in your project or home directory.
Format: <initials>: <name>[; <email>]
Example:
# .pairs - configuration for 'git pair'
# place in project or home directory
pairs:
  eh: Edward Hieatt
  js: Josh Susser; jsusser
  sf: Serguei Filimonov; serguei
email:
  prefix: pair
  domain: pivotallabs.com
INSTRUCTIONS
    exit(1)
  end
  pairs_file_path ? YAML.load_file(pairs_file_path) : {}
end

def get_global_config(config)
  if @options[:global] || config["global"]
    "--global"
  end
end

## End of configuration
#######################################################################

config               = get_pairs_config
global_config_string = get_global_config(config)
authors              = ARGV.map do |initials|
  if full_name = config['pairs'][initials.downcase]
    full_name
  else
    puts "Couldn't find author name for initials: #{initials}. Add this person to the .pairs file in your project or home directory."
    exit 1
  end
end

if authors.any?
  authors.sort!.uniq!
  names, emails = authors.collect do |a|
    both = a.split(";").collect {|s| s.strip}
    both << both[0].split(' ').first.downcase if both.length == 1  # default email to first name
    both
  end.transpose

  case authors.size
  when 1
    authors = names.first
  when 2
    authors = names.join(" & ")
  else
    authors = names[0..-2].join(", ") + " & " + names.last
  end

  email = if config['email'].is_a?(Hash)
    "#{([config['email']['prefix']] + emails).compact.join('+')}@#{config['email']['domain']}"
  else
    config['email']
  end

  initials = ARGV.join(' ')

  system(%Q{git config #{global_config_string} user.name "#{authors}"})
  system(%Q{git config #{global_config_string} user.email "#{email}"})
  system(%Q{git config #{global_config_string} user.initials "#{initials}"})
else
  system("git config #{global_config_string} --unset user.name")
  system("git config #{global_config_string} --unset user.email")
  system("git config #{global_config_string} --unset user.initials")
  puts "Unset #{global_config_string} user.name and user.email"
end

global_name_setting = `git config --global --get-regexp '^user\.name'`
local_name_setting = `git config -f #{git_dir}/config --get-regexp '^user\.name'`
if global_name_setting.length > 0 && local_name_setting.length > 0
  puts "NOTE: Overriding global user.name setting with local."
end
puts "global: #{global_name_setting}" if global_name_setting.length > 0
puts "local:  #{local_name_setting}"  if local_name_setting.length > 0


global_email_setting = `git config --global --get-regexp '^user\.email'`
local_email_setting = `git config -f #{git_dir}/config --get-regexp '^user\.email'`
if global_email_setting.length > 0 && local_email_setting.length > 0
  puts "NOTE: Overriding global user.email setting with local."
end
puts "global: #{global_email_setting}" if global_email_setting.length > 0
puts "local:  #{local_email_setting}"  if local_email_setting.length > 0
